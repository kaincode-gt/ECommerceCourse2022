@page "/category/create"
@page "/category/edit/{id:int}"
@inject ICategoryRepository _repository;
@inject NavigationManager _navigationManager;

<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3"> @Title Category</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="images/loading_icon.gif">
            </div>
        }
        else
        {
            <EditForm Model="Category" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                @* <ValidationSummary></ValidationSummary>*@
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Category.Name" class="form-control" />
                    <ValidationMessage For="()=>Category.Name"></ValidationMessage>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="category" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>

@code {
    private CategoryDTO Category { get; set; } = new CategoryDTO();
    private string Title { get; set; } = "Create";

    [Parameter]
    public int Id { get; set; }


    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                IsLoading = false;
            }
            else
            {
                Title = "Edit";
                await LoadCategory();
            }
        }
    }

    private async Task LoadCategory()
    {
        IsLoading = true;
        StateHasChanged();
        Category = await _repository.Get(Id);
        IsLoading = false;
        StateHasChanged();
    }

    private async Task UpsertCategory()
    {
        if (Id == 0)
        {
            await _repository.Create(Category);
        }
        else
        {
            await _repository.Update(Category);
        }

        _navigationManager.NavigateTo("category");
    }
}